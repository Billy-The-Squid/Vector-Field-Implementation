#pragma kernel OutwardsField
#pragma kernel SwirlField
#pragma kernel CoulombField


// The buffer storing the positions
RWStructuredBuffer<float3> _Positions;

// The buffer storing the value of the vector field at each point
RWStructuredBuffer<float3> _Vectors;
// It's set every frame by the C# script.

// The (0,0,0) point of the field
float3 _CenterPosition;

// These buffers allow you to send additional arguments to whatever your field function is. 
StructuredBuffer<float> _FloatArgs;
StructuredBuffer<float3> _VectorArgs;
// It's up to you to parse these inside the function, so you can split them into two separate arrays
// if you choose. Just remember that not every model supports GetDimensions, so you need to figure
// out for yourself how to stop from going out of bounds. 

// You can try to make those RWStructuredBuffers, but that crashed my computer so I'm not going to
// do that. 




#include "FieldLibrary.hlsl"




#define KERNEL_NAME(fieldName) \
    [numthreads(64, 1, 1)] \
    void fieldName##Field(uint3 id : SV_DispatchThreadID) { \
        uint bufferSize; \
        uint stride; \
        _Positions.GetDimensions(bufferSize, stride); \
        if (id.x < bufferSize) { \
            _Vectors[id.x] = fieldName(_Positions[id.x] - _CenterPosition); \
        } \
    }

KERNEL_NAME(Outwards)
KERNEL_NAME(Swirl)
KERNEL_NAME(Coulomb)